PyART.catalogs.sxs
==================

.. py:module:: PyART.catalogs.sxs


Classes
-------

.. autoapisummary::

   PyART.catalogs.sxs.Waveform_SXS


Functions
---------

.. autoapisummary::

   PyART.catalogs.sxs.save_dict_to_h5


Module Contents
---------------

.. py:class:: Waveform_SXS(path='../dat/SXS/', ID='0001', order=2, level=None, cut_N=None, cut_U=None, ellmax=8, load=['hlm', 'metadata'], download=False, downloads=['hlm', 'metadata'], load_m0=False, nu_rescale=False, src='BBH', ignore_deprecation=False, basename=None)

   Bases: :py:obj:`PyART.waveform.Waveform`


   Class to handle SXS waveforms
   Assumes that the data is in the directory specified py `path`,
   and that all simulations are stored in folders like SXS_BBH_XXXX,
   each containing the various `LevY` folders.
   e.g., the current default is
       ../dat/SXS_BBH_XXXX/LevY/


   .. py:attribute:: ID
      :value: '0001'



   .. py:attribute:: order
      :value: 2



   .. py:attribute:: level
      :value: None



   .. py:attribute:: cut_N
      :value: None



   .. py:attribute:: cut_U
      :value: None



   .. py:attribute:: ellmax
      :value: 8



   .. py:attribute:: _kind
      :value: 'SXS'



   .. py:attribute:: src
      :value: 'BBH'



   .. py:attribute:: nr
      :value: None



   .. py:attribute:: domain
      :value: 'Time'



   .. py:attribute:: nu_rescale
      :value: False



   .. py:attribute:: basename
      :value: None



   .. py:method:: check_cut_consistency()

      Check consistency between cut_N and cut_U.
      If both are None, set cut_N=0.
      If both are given, raise an error.
      If one is given, set the other one accordingly.



   .. py:method:: get_lev_fname(level=None, basename=None)

      Return file-name in a SXS-path with specified level,
      e.g. /my/sxs/path/Lev4/my_basename
      If basename is None, then return only /my/sxs/path/Lev4

      :param level: Level to use. If None, use self.level.
      :type level: int or None
      :param basename: Base name of the h5 file to load. If None, use self.basename.
      :type basename: str or None

      :returns: **fname** -- Full path to the requested file.
      :rtype: str



   .. py:method:: download_simulation(ID='0001', path=None, downloads=['hlm', 'metadata'], level=None, ignore_deprecation=False, extrapolation_order=None)

      Download the simulation from the SXS catalog; requires the sxs module
      Note that for backwards compatibility we transform the new (2025 onwards)
      format of the data to the old one, which is human-readable and easier to handle.

      :param ID: ID of the SXS simulation to download. Default is "0001".
      :type ID: str or int, optional
      :param path: Path where to store the downloaded data. Default is None, which
                   uses the current value of self.sxs_data_path. If the directory
                   does not exist, it will be created.
      :type path: str, optional
      :param downloads: Options to download. Can include "hlm", "metadata", "horizons", "psi4lm".
                        Default is ["hlm", "metadata"].
      :type downloads: list of str, optional
      :param level: Numerical resolution level to download. If None, the highest available
                    level will be downloaded. Default is None.
      :type level: int or None, optional
      :param ignore_deprecation: If True, ignore deprecation warnings when downloading. Default is False.
      :type ignore_deprecation: bool, optional
      :param extrapolation_order: Extrapolation order to use. If None, use self.order. Default is None.
      :type extrapolation_order: int or None, optional



   .. py:method:: load_metadata()

      Load the sxs metadata from the metadata.json file.
      Transform it to the PyART format, but also store the original
      metadata as self.ometadata for completeness.



   .. py:method:: load_horizon()

      Load the horizon data from Horizons.h5 file.
      Store the data in self._dyn dictionary



   .. py:method:: compute_spins_at_tref(tref)

      Compute the parallel and perpendicular components of the spins w.r.t L
      at a reference time tref. This requires the horizon data to be loaded.

      :param tref: Reference time
      :type tref: float

      :returns: **chi1_L, chi1_perp, chi2_L, chi2_perp** -- The parallel and perpendicular components of the spins at tref
      :rtype: float



   .. py:method:: load_hlm(ellmax=None, load_m0=False)

      Load the hlm modes from the h5 file. Store the data in self._hlm dictionary.

      :param ellmax: Maximum ell value to load. If None, use self.ellmax.
      :type ellmax: int or None
      :param load_m0: If True, load the m=0 modes as well. Default is False.
      :type load_m0: bool, optional



   .. py:method:: load_psi4lm(ellmax=None, load_m0=False)

      Load the psi4lm modes from the h5 file. Store the data in self._psi4lm dictionary.

      :param ellmax: Maximum ell value to load. If None, use self.ellmax.
      :type ellmax: int or None
      :param load_m0: If True, load the m=0 modes as well. Default is False.
      :type load_m0: bool, optional



   .. py:method:: compute_psi4_from_hlm()

      Compute the psi4lm by taking two time derivatives
      of the hlm modes



   .. py:method:: to_lvk(modes='all')

      Convert the data to LVK format, output an
      SXS_BBH_XXXX_ResY.h5 file

      Wrapper function to the `convert_sxs_to_lvc.py` from
      https://github.com/sxs-collaboration/catalog_tools/tree/master

      :param modes: Modes to convert. If "all", convert all modes up to self.ellmax.
                    If a list of tuples, convert only the specified modes.
                    Default is "all".
      :type modes: str or list of tuple, optional



.. py:function:: save_dict_to_h5(h5group, dictionary)

   Recursively save a nested dictionary to an HDF5 group or file.

   :param h5group: The HDF5 group or file where the dictionary will be saved.
   :type h5group: h5py.Group or h5py.File
   :param dictionary: The nested dictionary to save.
   :type dictionary: dict


